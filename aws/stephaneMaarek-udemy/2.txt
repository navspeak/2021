AWS CloudWatch Custom Metrics
= search metrics
- metrics like CPUUtization, Network utilization
- metrics belong to namespaces
- dimension is an attribute of a metrics (instance id, env, etc). Upto 10 dimension per metrics
- metrics have timestamp. Can create dashboard with metrics

EC2 detailed moitoring:
- EC2 metrics have every 5 min by default (basic)
- detailed monitoring (for cost) every 1 min . Free tier allows 10 detailed monitoring
- By default, basic monitoring is enabled when you use the AWS management console to create a launch configuration.
 Detailed monitoring is enabled by default when you create a launch configuration using the AWS CLI
- EC2 Memory usage is not pushed by default (must be pushed from inside the instance as a custom metric)
EC2 Custom metrics: can send custom metrics using CLI to cloudwatch.
 Metric resolution: Standard 1 min. High Resolution: up to 1 sec. higher cost

Cloudwatch Dashboard:
- Global | Can include graph from different regions
- automatic refresh 10s, 1m...
- 3 dashboa (up to 50 metrics free)
- $3/dashboard per month after that

CloudWatch can collect log from:
- Elastic Beanstalk - collect logs from applications
- ECS - collect logs from containers. AWS Lambda from functions. VPC flow logs - VPC specific logs.
 API Gateway, cloudTrail based on filter. CloudWatch log agents for example on EC2 m/c.
 Route53: Log DNS queries.
 Cloudwatch logs can go to: Batch export to S3 archival, streams to elastic search cluster

Log Storage:
  - Log Group: any name usually application name.
  - Log Streams: within Log group (per application, per log file, per container)
  - define expiration policies
  - AWS CLI to tail CloudWatch logs
  - To send logs to CloudWatch ensure IAM permissions.
CloudWatch Log Insights - to query logs and add queries to dashboa
CloudWatch can have a metric filter (say specific IP) to trigger alarm

CloudWatch Logs Agent (old) & Unified Agent
(metrics as well like CPU, netstat, disk IO at granular level. Swap, RAM. SSM parameter store)
Recover Ec2 instance:
- CloudWatch alarm (search in cloudwatch Ec2 metric by instance id) :statusCheckFailed_System
   - This checks Ec2 VM -> EC2 Instance recovery
- https://www.youtube.com/watch?v=z_bUDHUEWUY - SSM + Cloudwatch
AWS CloudWatch Alarms
===================
- attached to ASG, EC2 actions, SNS notification
- state: OK, INSUFFICIENT_DATA, ALARM

EC2 Instance Recovery
=========
Status Check:
  - Instance status = check EC2 VM
  - System Status = check the underlying hardware
  EC2< --- Monitored by cloudWatch alarm (statusCheckFailed_System). Action: Kicks in EC2 Instance recovery
Recovery: Same Private, Public, Elastic IP

AWS CloudWatch Events: Cron jobs or Event Pattern
===
Who deleted my EC2 insatnce => cloudTrail
AWS CloudTrail: Audit. enabled by default. = history of events = 90 days stored by default => send to s3
Management Events  (by default)| Data Events (not default enabled. Lot of logs) | CloudTrail Insights (unusual
  activity like burst of AWS IAM action, hitting service limit etc)
- Mgmt event - bypass KMS event
- Choose either Mutlti region set up is one (current) or all region. No option to select particular region
- Multi account set up require S3 bucket policy setup
- Logginng access accross multiple accounts require IAM roles setup
- only 5 trails
- can be sent to s3, cloudwatch
- use case failed logins, api auth failures, IAM changes, resource modification

AWS Config (per region but can be aggregated accross regions and accounts)
===
- Helps w/ auditing + recording compliance og=f AWS resources. Can store configuration data into s3 + athena
= Questions it can answer: Is there unrestricted SSH access to any Security Group, do my buckets have public access
  how has my ALB configuration changed over time?
= check things like instances have tag, if not remediation (stop EC2)
= Reactive
= Not free ($2 per active rule per region per month)
= Trail
==============================
STS - temp token valid from 15 mins up to 1 hr .
    - AssumeRole : within your own account or Cross Account Access
    - AssumeRoleWithSAML
    - AssumeRoleWithWebIndentity - returns cred for users logged in w/an iDP like Facebook
       (AWS recommends against using this in favor of Cognito)
    - GetSessionToken: for MFA, from a user or AWS account root user
    (refer STS1.png)

https://docs.aws.amazon.com/IAM/latest/UserGuide/tutorial_cross-account-with-roles.html
==
aws SSM (Simple System Manager) parameter store
REVISE: Why ASG does not terminate unhealthy instances: https://aws.amazon.com/premiumsupport/knowledge-center/auto-scaling-terminate-instance/
